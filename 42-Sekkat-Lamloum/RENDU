                      Mini-projet 1 : solveur DPLL récursif
                             fichier RENDU
                       (à remplir obligatoirement)

**Un mini-projet sans fichier RENDU rempli ne recevra pas de note.**

Date limite: 3 novembre 2023, 23h59

Identité
--------
Nombre de binôme: **à remplir**
Nom, prénom 1: **à remplir**
Nom, prénom 2: **à remplir**


Questions sur votre code
------------------------
0. Avez-vous testé que `make dpll` s'exécute sans erreurs ou warnings,
   et que ensuite `./dpll sudoku-4x4.cnf` donne la réponse attendue (voir
   fichier README) ?

   Oui, nous avant testé que `make dpll` s'exécute sans erreurs ou warnings, ça nous affiche:
   `ocamlfind ocamlopt -o dpll -package str -linkpkg dimacs.ml dpll.ml`

   Oui encore une fois nous avons testé `./dpll sudoku-4x4.cnf` donne la réponse attendue
   et ça donne la même réponse.

---

1. Avez-vous utilisé la fonction `filter_map` (donné dans dpll.ml)
   dans votre implémentation de `simplifie` ? 
   - Si oui, expliquez en quelques phrases en français comment vous
     l'avez utilisée.
   - Si non, expliquez en quelques phrases en français comment
     fonctionne votre implémentation de `simplifie`.

   Non nous n'avons pas utilisé la fonction `filter_map`.

   Notre implémentation de `simplifie` fonctionne comme tel :

   1.Nous avons utilisé la fonction `List.filter` pour nous donner les sous-listes 
   correspondant au prédicat (si on ne trouve pas le littéral 'l' 
   (via la fonction de recherche `List.mem`), 
   alors elle nous donne les sous-listes correspondantes 'clause_supr').
   Ceci permet d'éliminer les clauses contenant 'l'.

   2.Nous avons ensuite utilisé la fonction `List.map` pour appliquer la fonction 
   suivante à 'clause_supr' :
   Pour chaque clause, la fonction List.filter est à nouveau utilisée pour supprimer 
   le littéral (-l) seulement.

---

2. Pour l'implémentation de `unitaire`, quelles sont les fonctions
   auxiliaires que vous avez utilisées et/ou écrites ? (Par une
   fonction auxiliaire, on entend ici soit une fonction d'une
   bibliothèque, par exemple des fonctions comme `List.length`,
   `List.rev_append`, ou une fonction `aux_unitaire` que vous avez
   écrite vous-mêmes.) Expliquez en quelques phrases en français
   comment ces fonctions auxiliaires sont utilisées dans votre
   implémentation de la fonction `unitaire`.

   Nous avons crée une fonction récursive auxiliaire `course` dans la
   fonction unitaire. Cette fonction nous permet de parcourir l'ensemble
   des clauses et de vérifier si une clause est une clause unitaire en vérifiant
   si la clause en question contient un seul littéral. Si c'est le cas nous renvoyons
   ce littéral sinon nous continuons la recherche récursivement.

---

3. Pour l'implémentation de `pur`, quelles sont les fonctions
   auxiliaires que vous avez utilisées et/ou écrites ?  Expliquez en
   quelques phrases en français comment ces fonctions auxiliaires sont
   utilisées dans votre implémentation de la fonction `pur`.

   Pour cette fonction `pur`, nous avons utilisé les fonctions `List.flatten` 
   ainsi que `List.map` issues de la bibliothèque. `List.flatten` permet d'aplatir 
   une double liste en une liste simple, ce qui nous permet d'agir plus facilement 
   sur celle-ci pour trouver un littéral pur. Nous avons également utilisé `List.map` 
   pour rechercher à travers cette liste ainsi qu'à la liste 'memoire' des littéraux spécifiques.

---

4. Donnez un exemple d'une formule pour laquelle les deux fonctions
   `solveur_split` et `solveur_dpll_rec` ont un comportement
   différent, et expliquez les différences entre ces deux fonctions.

   

---

5. Avez-vous d'autres remarques sur votre rendu ? (question optionnelle)

   Oui, nous avons testé les fichiers DIMACS de votre site tout marche sauf 3 fichiers
   qui posent problème, nous avons `hamilton.cnf` ,'ais12.cnf' et `sudoku-9x9-god.cnf`,
   les deux premiers posent juste un problème de temps, ils prennent plusieurs minutes à
   s'exécuter mais le dernier ne veut pas finir son exécution. Nous avons donc compris que
   pour les deux premiers le problème venait de la compléxité de nos algorithmes mais pour
   le dernier nous ne comprennont pas le problème d'exécution.

---

--fin du fichier RENDU--
